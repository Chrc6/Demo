import com.sun.source.util.TaskEvent
import com.sun.source.util.TaskListener
import com.sun.tools.doclets.internal.toolkit.builders.XMLNode
import com.sun.tools.internal.xjc.model.nav.NavigatorImpl
import com.sun.xml.internal.bind.v2.runtime.output.XmlOutput
import groovy.json.JsonOutput
import groovy.util.slurpersupport.GPathResult
import groovy.xml.MarkupBuilder
import groovy.xml.XmlUtil
import org.gradle.api.internal.project.taskfactory.TaskIdentity
import org.gradle.execution.taskgraph.TaskListenerInternal

/**
 * 待解决问题：
 * 1.动态配置module路径：配置在gradle.properties中
 * 2.增量更新fragment参数
 * 3.格式化问题
 * 4.配置文件a给frouter用，配置文件b给正常fragment用，合并至配置文件c，配置文件c路径由使用者指定
 *
 * 问题：
 * 1.未用到注解的fragment的配置会被清掉，
 * 需要增量处理：注解配置文件+原生配置文件
 * 从有注解到无注解：当前的注解配置，跟上一次的注解配置文件作对比
 *
 * 2.action_id和fragment_id能不能只配1个
 *
 * 日志：
 * 22.01.10：插件适配safe-args
 *          写入文件时，格式化：XmlUtil().serialize
 * @return
 */
def writeNavFile() {
    def rootProjectPath = project.getRootDir().absolutePath
    def navigationFileDirPath = "${project.projectDir.absolutePath}/src/main/res/navigation"
    def buildAnnotationFilePath = "${project.buildDir.absolutePath}/generated/source/kapt/debug/com/netease/qa/annotationlib/generated/frouterprotocol.java"
    def navigationXmlFile = "${navigationFileDirPath}/all_graph_navigation.xml"
    def navigationMainXmlFile = "${navigationFileDirPath}/total_navigation.xml"
//    println("task.gradle....${project.projectDir.absolutePath}\n${project.buildDir}")

    def gradleProjectDir = project.file(navigationFileDirPath)
    if (!gradleProjectDir.exists()) {
        gradleProjectDir.mkdirs()
    }

    def configFile = project.file(buildAnnotationFilePath)
    if (configFile != null && configFile.exists()) {
//        println("task.gradle.................generate file read success......................")
    }  else {
//        println("task.gradle.................file"+(configFile==null)+"......................")
        return
    }

    def navFile = project.file(navigationXmlFile)
    if (navFile.exists()) {
        navFile.delete()
    }
    println("task.gradle.................gradle writnavfile start......................")

    def sw = new StringWriter()
    def contentSw = new StringWriter()

    def navEndStr = "</navigation>"
    def startDestination = parseProcessorFile(contentSw, configFile)
    def navHeadStr = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" +
            "    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n" +
            "xmlns:tools=\"http://schemas.android.com/tools\"\n"    +
    "    android:id=\"@+id/plugin_graph\"\n"
//    +
//            "    android:id=\"@+id/nav_ject_main\"\n" +
//            "    app:startDestination=\"@id/titleFragment\">\n"
    if (!startDestination.isEmpty()) {
        navHeadStr = navHeadStr + "    app:startDestination=\"@id/${startDestination}\">\n"
    } else {
        navHeadStr = navHeadStr + ">"
    }
    println("navHeadStr=${navHeadStr}")
    sw.append(navHeadStr + "\n")
    sw.append(contentSw.toString() + "\n")
    sw.append(navEndStr)

//    println("TestPlugin===  sw=${sw.toString()}")
    if (!sw.toString().isEmpty()) {
//        def list = new XmlParser().parseText(sw.toString())
//        def doc = DOMBuilder.parse(sw)
//        def xml = new MarkupBuilder(writer)

        navFile.createNewFile()
//        navFile.write(sw.toString())
        //https://blog.csdn.net/danpie3295/article/details/106779496
        //文件格式化
        new XmlUtil().serialize(sw.toString(), new FileWriter(navFile))
    }
    println("task.gradle.................gradle writnavfile finish......................")
}

def parseProcessorFile(StringWriter sw, File configFile) {
    def configList = [""]
    configFile.eachLine { line ->
        configList.add(line)
    }
    def startDestination = ""
    configList.forEach {
        if (it != null && !it.isEmpty()) {
            it = it.replace("//", "").replace("[", "").replace("]", "")
            def firstIndex = it.indexOf(":")
            it = it.substring(firstIndex+1, it.length())
            println("TestPlugin=== it="+it)
            def labelList = it.split(",")
//            //test data
//            def labelList = ["action_id:to_score_fragment", "action_destination:scoreFragment",
//                             "fragment_id:nav_ject_main", "fragment_name:com.netease.qa.jetpack.page.fragment.TitleFragment",
//                             "fragment_arguments_name:title",
//                             "fragment_arguments_argType:string",
//                             "fragment_arguments_defaultValue:test"]

            def actionLabelList = []
            def fragmentLabelList = []
//            actionLabelList.clear()
//            fragmentLabelList.clear()
            labelList.findAll() {
                if (it.contains("startDestination")) {
                    if (startDestination.isEmpty()) {
                        startDestination = it.split(":")[1]
                    } else {
                        throw new Exception("more than startDestination config")
                    }
                } else if (it.startsWith("action_")) {
                    actionLabelList.add(it)
                } else {
                    fragmentLabelList.add(it)
                }
            }
            addAction(sw, actionLabelList)
//            println("TestPlugin===  sw=${sw.toString()}")
            addFragment(sw, fragmentLabelList)
        }
    }
    return startDestination
}

def addAction(StringWriter sw, List<String> actionLabelList) {
    if (actionLabelList.isEmpty()) {
        return
    }
    sw.append("<action\n")
//    println("TestPlugin===  actionLabelList=${actionLabelList.toString()} ")
    actionLabelList.findAll() {
        def actionArray = it.split(":")
//        println("TestPlugin===" + actionArray.toString())
        if (actionArray == null) {
            throw Exception("注解错误")
        } else {
            actionArray = actionArray.toList()
            if (it.contains("id")) {
                sw.append("android:id=\"@+id/${actionArray[1]}\"\n")
            } else {
                sw.append("app:destination=\"@+id/${actionArray[1]}\"\n")
            }
        }
    }
    sw.append("/>")
}
def addFragment(StringWriter sw, List<String> fragmentLabelList) {
    sw.append("<fragment\n")
    def innerSw = new StringWriter()
    fragmentLabelList.findAll() {
        def fragmentArray = it.split(":")
        if (fragmentArray == null) {
            throw Exception("注解或参数名错误")
        }
        def fragmentKey = fragmentArray[0]
        def fragmentKeyArray = fragmentKey.split("_")
//        println("TestPlugin===  fragmentKeyArray data=${fragmentKeyArray.toString()}")
        if (fragmentKeyArray == null || fragmentKeyArray.size() < 2) {
            throw Exception("注解或参数名错误 it=${it}")
        }
        fragmentKeyArray = fragmentKeyArray.toList()
//        println("TestPlugin===  fragmentKeyArray length=${fragmentKeyArray.size()}")
        if (fragmentKeyArray.size() < 3) {
            if (fragmentKeyArray.contains("id")) {
                sw.append("android:id=\"@+id/${fragmentArray[1]}\"\n")
            } else if (fragmentKeyArray.contains("name")) {
                sw.append("android:name=\"${fragmentArray[1]}\"\n")
            }
        } else {
            if (innerSw.toString().isEmpty()) {
                innerSw.append("<argument \n")
            }
            if (fragmentKeyArray.contains("name")) {
                innerSw.append("android:name=\"${fragmentArray[1]}\"\n")
            } else if (fragmentKeyArray.contains("argType")) {
                innerSw.append("app:argType=\"${fragmentArray[1]}\"\n")
            } else if (fragmentKeyArray.contains("defaultValue")) {
                innerSw.append("android:defaultValue=\"${fragmentArray[1]}\"\n")
            }
        }
    }
    sw.append(">")
    if (innerSw.toString().contains("<argument")) {
        innerSw.append("/>")
    }
    sw.append(innerSw.toString())
//    println("TestPlugin===  innerSw=${innerSw.toString()}")
    sw.append("</fragment>")
}

def count = 1
task cmdTask {
    println " cmd task count=$count"
    count++
}

task checkOsTask {
//    project.tasks.findAll {
//        if ("assemble" == it.name) {
//            it.doLast {
//                println("注解=====${it.name} ==")
//            }
//        }
//        if (it.name.startsWith("assemble")) {
//            it.doLast {
//                println("注解=====${it.name} startsWith")
//            }
//            return
//        }
//        println("注解=== tasks ${it.name} path=${it.path}")
//    }

    project.gradle.addListener(new TaskListenerInternal() {
        @Override
        void beforeExecute(TaskIdentity<?> taskIdentity) {
            if (taskIdentity.name.startsWith("writeDebugApplicationId")
                && taskIdentity.identityPath.contains("jetpackdemo:jetpack")) {
                //写入文件
                println("注解====TaskListenerInternal beforeExecute ${taskIdentity.name}" +
                        " type=${taskIdentity.type} + identityPath=${taskIdentity.identityPath}")
//                writeNavFile()
            } else if (taskIdentity.name.startsWith("generateSafeArgsDebug")) {
                println("注解====TaskListenerInternal else if beforeExecute ${taskIdentity.name}" +
                        " type=${taskIdentity.type} + identityPath=${taskIdentity.identityPath}")
            }

        }

        @Override
        void afterExecute(TaskIdentity<?> taskIdentity, TaskState taskState) {
            //
        }
    })

    project.gradle.addListener(new TaskActionListener() {
        @Override
        void beforeActions(Task task) {

        }
        @Override
        void afterActions(Task task) {
            if (task.name.equals("packageDebug")) {
                //写入文件
                println("注解====TaskActionListener afterActions ${task.name}")
                //适配safe-args，插件执行顺序：safe-args(generateSafeArgsDebug)->annotation->writeNavFile->safe-args(generateSafeArgsDebug)
                writeNavFile()
                def process = "./gradlew generateSafeArgsDebug".execute()
                println "Found text ${process.text}"
            }
//            if (task.name.startsWith("compile")
//                    && task.name.endsWith("Kotlin")) {
//                //写入文件
//                println("注解====TaskActionListener afterActions ${task.name}")
//                writeNavFile()
////                def process = "./gradlew cmdTask".execute()
////                "./gradlew generateDebugResValues".execute()
////                "./gradlew generateDebugResources".execute()
////                "./gradlew mergeDebugResources".execute()
////                def process = "./gradlew generateSafeArgsDebug".execute()
////                println "Found text ${process.text}"
//            }
        }
    })
//    project.gradle.startParameter.taskNames.findAll {
//        println   ("注解====taskNames before ${it}")
//        if (it.toUpperCase().startsWith("ASSEMBLE")) {
//            println("注解====taskNames ${it}")
//        }
//    }
}